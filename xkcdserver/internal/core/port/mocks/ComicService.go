// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/AfoninaOlga/xkcd/internal/core/domain"
	mock "github.com/stretchr/testify/mock"
)

// ComicService is an autogenerated mock type for the ComicService type
type ComicService struct {
	mock.Mock
}

// LoadComics provides a mock function with given fields: ctx
func (_m *ComicService) LoadComics(ctx context.Context) int {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for LoadComics")
	}

	var r0 int
	if rf, ok := ret.Get(0).(func(context.Context) int); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// Search provides a mock function with given fields: _a0, _a1
func (_m *ComicService) Search(_a0 context.Context, _a1 string) []domain.FoundComic {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Search")
	}

	var r0 []domain.FoundComic
	if rf, ok := ret.Get(0).(func(context.Context, string) []domain.FoundComic); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.FoundComic)
		}
	}

	return r0
}

// NewComicService creates a new instance of ComicService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewComicService(t interface {
	mock.TestingT
	Cleanup(func())
}) *ComicService {
	mock := &ComicService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
